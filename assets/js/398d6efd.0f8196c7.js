"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2954],{7809:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tools/7z","title":"7z","description":"7-Zip is a free and open-source file archiver.","source":"@site/docs/tools/7z.md","sourceDirName":"tools","slug":"/tools/7z","permalink":"/site/docs/tools/7z","draft":false,"unlisted":false,"editUrl":"https://github.com/AdrianoRuseler/site/edit/main/docs/tools/7z.md","tags":[],"version":"current","lastUpdatedAt":1760789067000,"frontMatter":{"id":"7z","title":"7z","description":"7-Zip is a free and open-source file archiver."},"sidebar":"tutorialSidebar","previous":{"title":"Convert Audio to *.?","permalink":"/site/docs/tools/ffmpeg/audio/convert"},"next":{"title":"AutoHotkey","permalink":"/site/docs/tools/autohotkey"}}');var i=s(4848),n=s(8453);const o={id:"7z",title:"7z",description:"7-Zip is a free and open-source file archiver."},a=void 0,l={},c=[{value:"Website",id:"website",level:2},{value:"CLI",id:"cli",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"7-Zip is a file archiver with a high compression ratio."}),"\n",(0,i.jsx)(r.h2,{id:"website",children:"Website"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.7-zip.org/",children:"https://www.7-zip.org/"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"cli",children:"CLI"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"7-Zip 25.01 (x64) : Copyright (c) 1999-2025 Igor Pavlov : 2025-08-03\r\n\r\nUsage: 7z <command> [<switches>...] <archive_name> [<file_names>...] [@listfile]\r\n\r\n<Commands>\r\n  a : Add files to archive\r\n  b : Benchmark\r\n  d : Delete files from archive\r\n  e : Extract files from archive (without using directory names)\r\n  h : Calculate hash values for files\r\n  i : Show information about supported formats\r\n  l : List contents of archive\r\n  rn : Rename files in archive\r\n  t : Test integrity of archive\r\n  u : Update files to archive\r\n  x : eXtract files with full paths\r\n\r\n<Switches>\r\n  -- : Stop switches and @listfile parsing\r\n  -ai[r[-|0]][m[-|2]][w[-]]{@listfile|!wildcard} : Include archives\r\n  -ax[r[-|0]][m[-|2]][w[-]]{@listfile|!wildcard} : eXclude archives\r\n  -ao{a|s|t|u} : set Overwrite mode\r\n  -an : disable archive_name field\r\n  -bb[0-3] : set output log level\r\n  -bd : disable progress indicator\r\n  -bs{o|e|p}{0|1|2} : set output stream for output/error/progress line\r\n  -bt : show execution time statistics\r\n  -i[r[-|0]][m[-|2]][w[-]]{@listfile|!wildcard} : Include filenames\r\n  -m{Parameters} : set compression Method\r\n    -mmt[N] : set number of CPU threads\r\n    -mx[N] : set compression level: -mx1 (fastest) ... -mx9 (ultra)\r\n  -o{Directory} : set Output directory\r\n  -p{Password} : set Password\r\n  -r[-|0] : Recurse subdirectories for name search\r\n  -sa{a|e|s} : set Archive name mode\r\n  -scc{UTF-8|WIN|DOS} : set charset for console input/output\r\n  -scs{UTF-8|UTF-16LE|UTF-16BE|WIN|DOS|{id}} : set charset for list files\r\n  -scrc[CRC32|CRC64|SHA256|SHA1|XXH64|*] : set hash function for x, e, h commands\r\n  -sdel : delete files after compression\r\n  -seml[.] : send archive by email\r\n  -sfx[{name}] : Create SFX archive\r\n  -si[{name}] : read data from stdin\r\n  -slp : set Large Pages mode\r\n  -slt : show technical information for l (List) command\r\n  -snh : store hard links as links\r\n  -snl : store symbolic links as links\r\n  -sni : store NT security information\r\n  -sns[-] : store NTFS alternate streams\r\n  -so : write data to stdout\r\n  -spd : disable wildcard matching for file names\r\n  -spe : eliminate duplication of root folder for extract command\r\n  -spf[2] : use fully qualified file paths\r\n  -ssc[-] : set sensitive case mode\r\n  -sse : stop archive creating, if it can't open some input file\r\n  -ssp : do not change Last Access Time of source files while archiving\r\n  -ssw : compress shared files\r\n  -stl : set archive timestamp from the most recently modified file\r\n  -stm{HexMask} : set CPU thread affinity mask (hexadecimal number)\r\n  -stx{Type} : exclude archive type\r\n  -t{Type} : Set type of archive\r\n  -u[-][p#][q#][r#][x#][y#][z#][!newArchiveName] : Update options\r\n  -v{Size}[b|k|m|g] : Create volumes\r\n  -w[{path}] : assign Work directory. Empty path means a temporary directory\r\n  -x[r[-|0]][m[-|2]][w[-]]{@listfile|!wildcard} : eXclude filenames\r\n  -y : assume Yes on all queries\n"})}),"\n",(0,i.jsx)(r.p,{children:"Extrair todos os arquivo em *.zip"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"7z x *.zip\n"})})]})}function m(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>o,x:()=>a});var t=s(6540);const i={},n=t.createContext(i);function o(e){const r=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);